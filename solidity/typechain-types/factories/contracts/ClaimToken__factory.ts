/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ClaimToken,
  ClaimTokenInterface,
} from "../../contracts/ClaimToken";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "CALL_DENIED",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "CLAIM_ATTEMPT",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "externalClaimNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "gasToken",
        type: "address",
      },
    ],
    name: "externalSetGasToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
      {
        internalType: "address",
        name: "gasToken",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "revokeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061131b806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063704b6c021161005b578063704b6c02146100ea5780637da0a877146101065780639f4753b914610124578063c0c53b8b146101405761007d565b80632d34567014610082578063572b6c051461009e5780636039cab7146100ce575b600080fd5b61009c60048036038101906100979190610d16565b61015c565b005b6100b860048036038101906100b39190610d16565b61030e565b6040516100c59190610d5e565b60405180910390f35b6100e860048036038101906100e39190610daf565b610368565b005b61010460048036038101906100ff9190610d16565b610582565b005b61010e610733565b60405161011b9190610e11565b60405180910390f35b61013e60048036038101906101399190610d16565b61075d565b005b61015a60048036038101906101559190610e2c565b6108f8565b005b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166101e5577fe3a10771a07da029a0fa1d3587ba330cb8fd05336e561d6e017e9f5346b79682336040516101dc9190610e11565b60405180910390a15b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16336040516020016102439190610ec7565b6040516020818303038152906040526040516020016102629190610f79565b604051602081830303815290604052906102b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a99190610ffa565b60405180910390fd5b506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000610372610a84565b90507fbf91aef4b601c6ec1a8288ba8c27089cda4ef3c9732960740149a6a58eec37a8818585856040516103a9949392919061102b565b60405180910390a1600083905060008173ffffffffffffffffffffffffffffffffffffffff1662fdd58e84866040518363ffffffff1660e01b81526004016103f2929190611070565b602060405180830381865afa15801561040f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043391906110ae565b11610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046a90611127565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16634afbecfe83878660016040518563ffffffff1660e01b81526004016104b3949392919061118c565b600060405180830381600087803b1580156104cd57600080fd5b505af11580156104e1573d6000803e3d6000fd5b505050506000609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634cd75ad08460016040518363ffffffff1660e01b81526004016105489291906111d1565b600060405180830381600087803b15801561056257600080fd5b505af1158015610576573d6000803e3d6000fd5b50505050505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661060b577fe3a10771a07da029a0fa1d3587ba330cb8fd05336e561d6e017e9f5346b79682336040516106029190610e11565b60405180910390a15b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16336040516020016106699190610ec7565b6040516020818303038152906040526040516020016106889190610f79565b604051602081830303815290604052906106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf9190610ffa565b60405180910390fd5b5060018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107e6577fe3a10771a07da029a0fa1d3587ba330cb8fd05336e561d6e017e9f5346b79682336040516107dd9190610e11565b60405180910390a15b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16336040516020016108449190610ec7565b6040516020818303038152906040526040516020016108639190610f79565b604051602081830303815290604052906108b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108aa9190610ffa565b60405180910390fd5b5080609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900460ff161590508080156109295750600160008054906101000a900460ff1660ff16105b80610956575061093830610ab6565b1580156109555750600160008054906101000a900460ff1660ff16145b5b610995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098c9061126c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156109d2576001600060016101000a81548160ff0219169083151502179055505b6109db84610ad9565b6109e483610c67565b81609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610a7e5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610a7591906112ca565b60405180910390a15b50505050565b6000610a8f3361030e565b15610aa357601436033560601c9050610ab2565b610aab610cab565b9050610ab3565b5b90565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008060019054906101000a900460ff16159050808015610b0a5750600160008054906101000a900460ff1660ff16105b80610b375750610b1930610ab6565b158015610b365750600160008054906101000a900460ff1660ff16145b5b610b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6d9061126c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610bb3576001600060016101000a81548160ff0219169083151502179055505b60018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508015610c635760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610c5a91906112ca565b60405180910390a15b5050565b80606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ce382610cb8565b9050919050565b610cf381610cd8565b8114610cfe57600080fd5b50565b600081359050610d1081610cea565b92915050565b600060208284031215610d2c57610d2b610cb3565b5b6000610d3a84828501610d01565b91505092915050565b60008115159050919050565b610d5881610d43565b82525050565b6000602082019050610d736000830184610d4f565b92915050565b6000819050919050565b610d8c81610d79565b8114610d9757600080fd5b50565b600081359050610da981610d83565b92915050565b600080600060608486031215610dc857610dc7610cb3565b5b6000610dd686828701610d01565b9350506020610de786828701610d01565b9250506040610df886828701610d9a565b9150509250925092565b610e0b81610cd8565b82525050565b6000602082019050610e266000830184610e02565b92915050565b600080600060608486031215610e4557610e44610cb3565b5b6000610e5386828701610d01565b9350506020610e6486828701610d01565b9250506040610e7586828701610d01565b9150509250925092565b60008160601b9050919050565b6000610e9782610e7f565b9050919050565b6000610ea982610e8c565b9050919050565b610ec1610ebc82610cd8565b610e9e565b82525050565b6000610ed38284610eb0565b60148201915081905092915050565b7f52657175697265732041646d696e3a2000000000000000000000000000000000815250565b600081519050919050565b600081905092915050565b60005b83811015610f3c578082015181840152602081019050610f21565b60008484015250505050565b6000610f5382610f08565b610f5d8185610f13565b9350610f6d818560208601610f1e565b80840191505092915050565b6000610f8482610ee2565b601082019150610f948284610f48565b915081905092915050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b6000610fcc82610f08565b610fd68185610f9f565b9350610fe6818560208601610f1e565b610fef81610fb0565b840191505092915050565b600060208201905081810360008301526110148184610fc1565b905092915050565b61102581610d79565b82525050565b60006080820190506110406000830187610e02565b61104d6020830186610e02565b61105a6040830185610e02565b611067606083018461101c565b95945050505050565b60006040820190506110856000830185610e02565b611092602083018461101c565b9392505050565b6000815190506110a881610d83565b92915050565b6000602082840312156110c4576110c3610cb3565b5b60006110d284828501611099565b91505092915050565b7f53656e64657220646f6573206e6f74206f776e20746865206173736574000000600082015250565b6000611111601d83610f9f565b915061111c826110db565b602082019050919050565b6000602082019050818103600083015261114081611104565b9050919050565b6000819050919050565b6000819050919050565b600061117661117161116c84611147565b611151565b610d79565b9050919050565b6111868161115b565b82525050565b60006080820190506111a16000830187610e02565b6111ae6020830186610e02565b6111bb604083018561101c565b6111c8606083018461117d565b95945050505050565b60006040820190506111e66000830185610e02565b6111f3602083018461117d565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611256602e83610f9f565b9150611261826111fa565b604082019050919050565b6000602082019050818103600083015261128581611249565b9050919050565b600060ff82169050919050565b60006112b46112af6112aa84611147565b611151565b61128c565b9050919050565b6112c481611299565b82525050565b60006020820190506112df60008301846112bb565b9291505056fea2646970667358221220122b4400fccf3b3cf6c782192fc41e820c8548a50c6d6b17cbadfd725555b71164736f6c63430008110033";

type ClaimTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClaimToken__factory extends ContractFactory {
  constructor(...args: ClaimTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ClaimToken> {
    return super.deploy(overrides || {}) as Promise<ClaimToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ClaimToken {
    return super.attach(address) as ClaimToken;
  }
  override connect(signer: Signer): ClaimToken__factory {
    return super.connect(signer) as ClaimToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimTokenInterface {
    return new utils.Interface(_abi) as ClaimTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimToken {
    return new Contract(address, _abi, signerOrProvider) as ClaimToken;
  }
}
