/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MetaTX, MetaTXInterface } from "../../contracts/MetaTX";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "SayHelloForFree",
    type: "event",
  },
  {
    inputs: [],
    name: "getLastMessage",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTrustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "sayHello",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "setTrustedForwarder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e72806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637da0a8771161005b5780637da0a87714610113578063c3a9b1c514610131578063ce1b815f1461014d578063da7422281461016b57610088565b8063485cc9551461008d578063526bf76e146100a9578063572b6c05146100c7578063704b6c02146100f7575b600080fd5b6100a760048036038101906100a2919061071c565b610187565b005b6100b1610309565b6040516100be91906107ec565b60405180910390f35b6100e160048036038101906100dc919061080e565b61039b565b6040516100ee9190610856565b60405180910390f35b610111600480360381019061010c919061080e565b6103f5565b005b61011b6104d0565b6040516101289190610880565b60405180910390f35b61014b60048036038101906101469190610900565b6104fa565b005b610155610552565b6040516101629190610880565b60405180910390f35b6101856004803603810190610180919061080e565b61057c565b005b60008060019054906101000a900460ff161590508080156101b85750600160008054906101000a900460ff1660ff16105b806101e557506101c730610657565b1580156101e45750600160008054906101000a900460ff1660ff16145b5b610224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021b906109bf565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610261576001600060016101000a81548160ff0219169083151502179055505b82603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102ab8261057c565b80156103045760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516102fb9190610a31565b60405180910390a15b505050565b60606035805461031890610a7b565b80601f016020809104026020016040519081016040528092919081815260200182805461034490610a7b565b80156103915780601f1061036657610100808354040283529160200191610391565b820191906000526020600020905b81548152906001019060200180831161037457829003601f168201915b5050505050905090565b6000603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661043661067a565b73ffffffffffffffffffffffffffffffffffffffff161461048c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048390610af8565b60405180910390fd5b80603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b81816035918261050b929190610cfe565b507fb1577ea472df72aea3db65a47c1e4ede157af23c08c35d0b0afcae2a9e3476e761053561067a565b838360405161054693929190610e0a565b60405180910390a15050565b6000603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105bd61067a565b73ffffffffffffffffffffffffffffffffffffffff1614610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a90610af8565b60405180910390fd5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006106853361039b565b1561069957601436033560601c90506106a8565b6106a16106ac565b90506106a9565b5b90565b600033905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106e9826106be565b9050919050565b6106f9816106de565b811461070457600080fd5b50565b600081359050610716816106f0565b92915050565b60008060408385031215610733576107326106b4565b5b600061074185828601610707565b925050602061075285828601610707565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561079657808201518184015260208101905061077b565b60008484015250505050565b6000601f19601f8301169050919050565b60006107be8261075c565b6107c88185610767565b93506107d8818560208601610778565b6107e1816107a2565b840191505092915050565b6000602082019050818103600083015261080681846107b3565b905092915050565b600060208284031215610824576108236106b4565b5b600061083284828501610707565b91505092915050565b60008115159050919050565b6108508161083b565b82525050565b600060208201905061086b6000830184610847565b92915050565b61087a816106de565b82525050565b60006020820190506108956000830184610871565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126108c0576108bf61089b565b5b8235905067ffffffffffffffff8111156108dd576108dc6108a0565b5b6020830191508360018202830111156108f9576108f86108a5565b5b9250929050565b60008060208385031215610917576109166106b4565b5b600083013567ffffffffffffffff811115610935576109346106b9565b5b610941858286016108aa565b92509250509250929050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006109a9602e83610767565b91506109b48261094d565b604082019050919050565b600060208201905081810360008301526109d88161099c565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000610a1b610a16610a11846109df565b6109f6565b6109e9565b9050919050565b610a2b81610a00565b82525050565b6000602082019050610a466000830184610a22565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610a9357607f821691505b602082108103610aa657610aa5610a4c565b5b50919050565b7f52657175697265732061646d696e206163636f756e7400000000000000000000600082015250565b6000610ae2601683610767565b9150610aed82610aac565b602082019050919050565b60006020820190508181036000830152610b1181610ad5565b9050919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610bb47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610b77565b610bbe8683610b77565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610bfb610bf6610bf184610bd6565b6109f6565b610bd6565b9050919050565b6000819050919050565b610c1583610be0565b610c29610c2182610c02565b848454610b84565b825550505050565b600090565b610c3e610c31565b610c49818484610c0c565b505050565b5b81811015610c6d57610c62600082610c36565b600181019050610c4f565b5050565b601f821115610cb257610c8381610b52565b610c8c84610b67565b81016020851015610c9b578190505b610caf610ca785610b67565b830182610c4e565b50505b505050565b600082821c905092915050565b6000610cd560001984600802610cb7565b1980831691505092915050565b6000610cee8383610cc4565b9150826002028217905092915050565b610d088383610b18565b67ffffffffffffffff811115610d2157610d20610b23565b5b610d2b8254610a7b565b610d36828285610c71565b6000601f831160018114610d655760008415610d53578287013590505b610d5d8582610ce2565b865550610dc5565b601f198416610d7386610b52565b60005b82811015610d9b57848901358255600182019150602085019450602081019050610d76565b86831015610db85784890135610db4601f891682610cc4565b8355505b6001600288020188555050505b50505050505050565b82818337600083830152505050565b6000610de98385610767565b9350610df6838584610dce565b610dff836107a2565b840190509392505050565b6000604082019050610e1f6000830186610871565b8181036020830152610e32818486610ddd565b905094935050505056fea2646970667358221220d63c5fe0333b673ab662bb75912861600272ab57c2cc6f3d5f5551911f497d7a64736f6c63430008110033";

type MetaTXConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MetaTXConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MetaTX__factory extends ContractFactory {
  constructor(...args: MetaTXConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MetaTX> {
    return super.deploy(overrides || {}) as Promise<MetaTX>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MetaTX {
    return super.attach(address) as MetaTX;
  }
  override connect(signer: Signer): MetaTX__factory {
    return super.connect(signer) as MetaTX__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MetaTXInterface {
    return new utils.Interface(_abi) as MetaTXInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MetaTX {
    return new Contract(address, _abi, signerOrProvider) as MetaTX;
  }
}
